/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package avltree;

/**
 *
 * @author Administrator
 */


//cay can bang
public class AVLtree {

   

 

    /**
     * @param args the command line arguments
     */
    
    class Node {
        
        int data;
        Node right;
        Node left;
        int height; // chieu dai cua cay
        Node(int val) {
           data = val;
           right = null;
           left = null;
           height = 0;
        }
        Node() {
            data = 0;
            left = null;
            right = null;
            height = 0;
        
        
        
        }
    } 
    
    
    
    // tra ve chieu cao cua cay
    private int height(Node root) {
        
        if(root == null) {
            return -1;
        } else {
            return root.height;
        }
     
    }
    
    
    
    // set lai chieu cao cua la
    private int setHeight(Node root) {
        if(root == null) {
            return -1;
        } else {
            return 1 + Math.max((root.left != null ? root.left.height : 0), (root.right != null ? root.right.height : 0));
        
        }
    }
    
    
    
    // chen root ra la 
    public Node insert(Node root, int data) {
        if(root == null) {
            root = new Node(data);
            root.height = this.setHeight(root);
           
        }
        if(root.data <= data) {
            root.right = insert(root.right, data);
        
        } else {
        
            root.left = insert(root.left, data);
        
        }
        
        
        int balance = height(root.left) - height(root.right);
        
        
        if(balance  > 1) {
        
            if(height(root.left.left) >= height(root.left.right)) {
                root = rightRotation(root); // truong hop left- left
            
            
            } else {
                root.left = leftRotation(root.left);
                root = rightRotation(root);    // truong hop left - right
            
            }
        } else if(balance < -1) {
            if(height(root.right.right) >= height(root.right.left)) {
                // truong hop right- right
                 root = leftRotation(root);
                
    
            } else {
                // truong hop right - left
                root.right = rightRotation(root.right);
                root =leftRotation(root);
            }
            
        
        } else {
        
            root.height = setHeight(root);
           
        }
       
        
        
        return root;
        
   }
    
    
    
    
    private Node leftRotation(Node root) {
        
        Node newRoot = root.right;
        root.right = root.right.left;
        newRoot.left = root;
        root.height = setHeight(root);
        newRoot.height = setHeight(newRoot);
        return newRoot;
    }
    
    private Node rightRotation(Node root) {
        Node newRoot = root.left;
        root.left = root.left.right;
        newRoot.right = root;
        root.height = setHeight(root);
        newRoot.height = setHeight(newRoot);
        return newRoot;
    }
    
    
    
    
    
    
    
    public static void main(String[] args) {
        // TODO code application logic here
    
    
    
    }
    
}
